name: CI/CD Workflow

on:
  push:
    branches:
      - 'feat/**'
      - main
      - dev
  pull_request:
    branches:
      - dev

jobs:
  deploy:
    name: Build & Deploy to AWS EC2
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🔧 Create env.properties file
        run: |
          mkdir -p src/main/resources/properties
          echo "${{ secrets.ENV }}" > src/main/resources/properties/.env.properties

      - name: 🏗️ Build with Gradle
        run: |
          echo "🚀 빌드 시작!"
          ./gradlew clean build -x test
          echo "✅ 빌드 완료!"

      - name: 🔐 Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_KEY }}" > ~/.ssh/aws_key.pem
          chmod 600 ~/.ssh/aws_key.pem
          ssh-keyscan -H ${{ secrets.AWS_URL }} >> ~/.ssh/known_hosts

      - name: 🚚 Deploy to AWS EC2
        run: |
          echo "🚀 EC2 배포 시작!"
          JAR_NAME=$(ls build/libs/*.jar | head -n 1)
          echo "✅ 배포할 JAR: $JAR_NAME"

          # EC2로 JAR 전송
          scp -i ~/.ssh/aws_key.pem "$JAR_NAME" ubuntu@${{ secrets.AWS_URL }}:/home/ubuntu/

          # EC2 내부에서 프로세스 관리 및 새 버전 실행
          ssh -i ~/.ssh/aws_key.pem ubuntu@${{ secrets.AWS_URL }} << 'EOF'
            echo "🔁 기존 프로세스 확인 중..."
            PID=$(pgrep -f 'java -jar' || true)
            if [ -n "$PID" ]; then
              echo "⚠️ 기존 프로세스($PID) 종료 중..."
              kill -9 $PID
              sleep 3
            else
              echo "✅ 기존 실행 중인 프로세스 없음"
            fi

            echo "🚀 새 버전 실행 준비 중..."
            JAR_NAME=$(ls /home/ubuntu/*.jar | head -n 1)

            # 백그라운드 실행 + 로그 기록
            nohup java -jar "$JAR_NAME" > app.log 2>&1 &

            echo "✅ 새 앱 실행 완료!"
            echo "🔎 현재 실행 중 프로세스:"
            pgrep -a java
          EOF
